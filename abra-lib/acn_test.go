package abra

import (
	"testing"
)

func init() {
}

var validACNs = []struct {
	acn string
}{
	{"0 0 0 0 0 0 0 1 9"},
	{"00 02 50 00 0"},
	{"00 0 5 00 00 5"},
	{"000 750 005"},
	{"001 000 004"},
	{"001 250 004"},
	{"001 500 009"},
	{"001 749 999"},
	{"001 999 999"},
	{"002 249 998"},
	{"002 499 998"},
	{"002 749 993"},
	{"002 999 993"},
	{"003 249 992"},
	{"003 499 992"},
	{"003 749 988"},
	{"003 999 988"},
	{"004 249 987"},
	{"004 499 987"},
	{"004 749 982"},
	{"004 999 982"},
	{"005 249 981"},
	{"005 499 981"},
	{"005 749 986"},
	{"005 999 977"},
	{"006 249 976"},
	{"006 499 976"},
	{"006 749 980"},
	{"006 999 980"},
	{"007 249 989"},
	{"007 499 989"},
	{"007 749 975"},
	{"007 999 975"},
	{"008 249 974"},
	{"008 499 974"},
	{"008 749 979"},
	{"008 999 979"},
	{"009 249 969"},
	{"009 499 969"},
	{"009 749 964"},
	{"009 999 964"},
	{"010 249 966"},
	{"010 499 966"},
	{"010 749 961"},
}

var invalidACNs = []struct {
	acn string
}{
	{"000000010"},
	{"000250001"},
	{"000500006"},
	{"000750006"},
	{"001000005"},
	{"001250005"},
	{"001500000"},
	{"001749990"},
	{"001999990"},
	{"002249999"},
	{"002499999"},
	{"002749994"},
	{"002999994"},
	{"003249993"},
	{"003499993"},
	{"003749989"},
	{"003999989"},
	{"004249988"},
	{"004499988"},
	{"004749983"},
	{"004999983"},
	{"005249982"},
	{"005499982"},
	{"005749987"},
	{"005999978"},
	{"006249977"},
	{"006499977"},
	{"006749981"},
	{"006999981"},
	{"007249980"},
	{"007499980"},
	{"007749976"},
	{"007999976"},
	{"008249975"},
	{"008499975"},
	{"008749970"},
	{"008999970"},
	{"009249960"},
	{"009499960"},
	{"009749965"},
	{"009999965"},
	{"010249967"},
	{"010499967"},
	{"010749962"},
	{"ONE"},
	{"010 749 962 Z"},
	{""},
	{"ABCdefGHI"},
}

func TestValidateACN_ValidACNs(t *testing.T) {
	for _, acn := range validACNs {
		valid, err := ValidateACN(acn.acn)

		if err != nil {
			t.Error(err)
			continue
		}
		if valid != true {
			t.Error("Invalid when should be valid")
			continue
		}
	}
}

func TestValidateACN_InvalidACNs(t *testing.T) {
	for _, acn := range invalidACNs {
		valid, err := ValidateACN(acn.acn)

		if err == nil {
			t.Error("Expected error")
			continue
		}
		if valid == true {
			t.Error("Valid when should be invalid")
			continue
		}
	}
}

func TestIsValid_ValidACNs(t *testing.T) {
	a := &ACN{
		IdentifierValue: "009 999 964",
	}

	valid, err := a.IsValid()

	if err != nil {
		t.Error(err)
	}
	if valid != true {
		t.Error("Invalid when should be valid")
	}
}
